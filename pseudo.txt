AuctionXMLParser.class
	Main function here.
	Reference given XML parser to do JAXP parsing.
	
	Variables
	{
		itemMap[ItemID -> Item]
		userMap[UserID -> User]
		categoryStringMap[String name -> CategoryID]
		categoryIDMap[CategoryID -> String name]
		bids[]
	}
	
	main()
		Parse all files in directory
		parseDirectory() 
	
	parseDirectory()
		Get list of all files in directory
		Call parse document on each file
		parseXMLDocument()
	
	parseXMLDocument()
		Use the JAXP parsing to get all Item elements
		Process each element
			Create an Item by parsing the the "Item" element
			parseItem()
			Add the resulting item to items[]
			addItem()
	
	parseItem()
		// Build most of Item object
		Create a new Item object
		Grab the "itemID" and set it
		Grab the "name" and set it
		Grab the "buyPrice" and set it
		Grab the "firstMinimumBid" and set it
		Grab the "numBids" and set it
		Grab the "currentBidAmount" and set it
		Grab the "started" and set it
		Grab the "ends" and set it
		Grab the "description" and set it
			
		// Build User object for seller	
		Create a User by parsing the "Seller" element
		parseSeller()
		Grab Location and set the user's "location"
		Grab Country and set the user's "country"
		Add the user and account for conflicts
		addUser()
		
		// Build Categories array
		Create an array of category strings by parsing the "Category"s
		Get an array of the equivalent category ID's
		getCategoryIDs()
		
		// Process Bids
		Hand off the bids to be parsed for Bid and User info
		parseBids()
		For each big, update it's ItemID
		
		// Set the remaining fields of the Item object
		Grab the User's ID and set item's "userID"
		Set the item's category array
	
	parseSeller()
		Create a User object
		Grab the "userID" and set it
		Grab the "rating" and set it
	
	parseBids()
		For each bid element, process
			Parse the bid for User info and Bid info
			parseBid()
			Add the resulting Bid to the bids[] array
	
	parseBid()
		// Build most of the Bid object
		Grab the "time" and set it
		Grab the "amount" and set it
		
		// Process Bidder object for User
		Create a user from the Bidder element
		parseBidder()
		Add the user and account for conflicts
		addUser()
		
		// Set the remaining fields of the Bid object
		Set the Bid item's "userID"
	
	parseBidder()
		Create a User object
		Grab the "userID" and set it
		Grab the "rating" and set it
	
	getCategoryIDs()
		Create a return array
		Process each Category string
			Check for category in string->id map
			If it exists
				Add it to the return array
			If it doesn't
				Create a new id (increment) 
				Add  pair to string->id, id->string maps
				Add new id to return array
		Return the array
	
	addItem()
		If the item doesn't exist in itemMap
			Add it
	
	addUser()
		If the user doesn't exist in userMap
			Add them
		If the user does exist in userMap
			Grab the existing User
			Merge the two Users to create a new user
			mergeUsers()
	
	mergeUsers()
		Compare field by field
		Update first User to gain any missing attributes
		Print any conflicts (should not occur)
			

	
Category
	Covered by CategoryID array in item
	Will have hash maps of item -> category, and category -> item in Parse.class

Item2Seller
	Covered by USERID field in Item

ItemCategory
	Covered by category[] array
